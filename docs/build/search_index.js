var documenterSearchIndex = {"docs":
[{"location":"cft_data/#Basic-types","page":"Basic types","title":"Basic types","text":"","category":"section"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"The package has a few types to represent objects in a Virasoro CFT:","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"CentralCharges\nConformalDimensions\nFields","category":"page"},{"location":"cft_data/#Central-charges","page":"Basic types","title":"Central charges","text":"","category":"section"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"We parametrise the central charge of our theories in terms of variables c, B, b or \\beta related by","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"c = 13 + 6B + 6 B^-1 quad  quad B = b^2 = -beta^2\nquad B = fracc-13 pm sqrt(c-1)(c-25)12","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"By convention we keep beta = ib. In O(n) and U(n) models the central charge is related to n via","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"n = - 2 cos(pi beta^2)","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"The program allows to conveniently create central charges from any of these four parameters, and to retrieve the value of any parameter:","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"CentralCharge\nCentralCharge(; β=missing, c=missing, B=missing, b=missing)","category":"page"},{"location":"cft_data/#BootstrapVirasoro.CentralCharge","page":"Basic types","title":"BootstrapVirasoro.CentralCharge","text":"CentralCharge{T}\n\nType representing a central charge. T is expected to be a real or complex number, of standard or arbitrary precision. The supported parameters are c, β, b, B.\n\nExamples\n\njulia> c = CentralCharge(c = 0.7)\nc = 0.7000000000000011 + 0.0im, β = -0.894427190999916 - 0.0im\n\njulia> c.b\n-0.0 + 0.894427190999916im\n\njulia> c.n\n1.6180339887498953 + 0.0im\n\n\n\n\n\n","category":"type"},{"location":"cft_data/#BootstrapVirasoro.CentralCharge-Tuple{}","page":"Basic types","title":"BootstrapVirasoro.CentralCharge","text":"CentralCharge(parameter = value)\n\nConstructor function for the CentralCharge type.\n\nGiven one of the four parameters c, b, β, B and its value, creates an object CentralCharge{T}.\n\nExample\n\njulia> setprecision(BigFloat, 20, base=10);\n\njulia> CentralCharge(B = 0.5)\nc = 27.999999999999996 + 0.0im, β = 0.0 - 0.7071067811865476im\n\njulia> CentralCharge(β = 0.7)\nc = -2.184897959183676 + 0.0im, β = -0.7 - 0.0im\n\njulia> CentralCharge(c = big\"0.1\" + 0.2im)\nc = 0.09999999999999999991326 + 0.2000000000000000111158im, β = -0.8237591041762989640376 - 0.01729590504934815486866im\n\n\n\n\n\n","category":"method"},{"location":"cft_data/#Conformal-Dimensions","page":"Basic types","title":"Conformal Dimensions","text":"","category":"section"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"We parametrise the conformal dimensions in terms of variables Delta P p delta, related by","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"Delta = fracc-124 + delta  quad  quad delta = P^2 = -p^2","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"The variable P is called the momentum, and Delta is the eigenvalue of the dilation operator. By convention, we always keep P=ip. Moreover, we introduce the following parametrisation of dimensions in terms of Kac indices r s:","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"P_(rs)=frac12(beta r - beta^-1s)","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"where rs are arbitrary numbers. This convention is different from the one in Sylvain\\'s code, but similar to our more recent conventions, such as in Sylvain's review on solvable CFTs.","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"The program lets us define these objects and access the various parametrisations:","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"ConformalDimension\nConformalDimension(\n    c::CentralCharge;\n    Kac=missing, r=missing, s=missing,\n    Δ=missing, δ=missing, P=missing, p=missing\n)","category":"page"},{"location":"cft_data/#BootstrapVirasoro.ConformalDimension","page":"Basic types","title":"BootstrapVirasoro.ConformalDimension","text":"ConformalDimension{T}\n\nType for encoding a conformal dimension. The supported parameters are Δ, δ, P, p, w, or the Kac indices r and s.\n\nExamples\n\njulia> c = CentralCharge(:c, 0.5);\n\njulia> d1 = ConformalDimension(c, P = 1.2+0.1im)\nConformalDimension{ComplexF64} with\nΔ = 1.4091666666666667 + 0.24im, P = 1.2 + 0.1im\n\njulia> d2 = ConformalDimension(c, Kac=true, r=2, s=3//2)\nConformalDimension{ComplexF64} with Kac indices r = 2//1, s = 3//2\n\njulia> d1.P\n1.2 + 0.1im\n\njulia> d2.Δ\n-0.020833333333333332 + 0.0im\n\njulia> d1 + d2\nConformalDimension{ComplexF64} with\nΔ = 1.3883333333333332 + 0.24im, P = 1.1913489935345947 + 0.10072615216131914im\n\njulia> d1.w\n2.05874441299789 - 0.06772184182090507im\n\n\n\n\n\n","category":"type"},{"location":"cft_data/#BootstrapVirasoro.ConformalDimension-Tuple{CentralCharge}","page":"Basic types","title":"BootstrapVirasoro.ConformalDimension","text":"ConformalDimension(c, parameter, value; Kac=false, r=0, s=0)\n\nConstructor function for the ConformalDimension type.\n\nExamples\n\njulia> c = CentralCharge(β = 0.3im)\nc = 80.20666666666665 + 0.0im, β = 0.0 - 0.3im\n\njulia> d1 = ConformalDimension(c, δ = 0.5)\nConformalDimension{ComplexF64} with\nΔ = 3.800277777777777 + 0.0im, P = 0.7071067811865476\n\njulia> d2 = ConformalDimension(c, Kac=true, r=3//2, s=2//3)\nConformalDimension{ComplexF64} with Kac indices r = 3//2, s = 2//3\n\n\n\n\n\n","category":"method"},{"location":"cft_data/#Fields","page":"Basic types","title":"Fields","text":"","category":"section"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"For our purposes, a field is the data of left and right conformal dimensions. We denote V_(r s) a field with left and right dimensions (Delta_(r s) Delta_(r -s)).","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"The program exposes a Field struct and convenient constructors:","category":"page"},{"location":"cft_data/","page":"Basic types","title":"Basic types","text":"Field\nField(\n    c::CentralCharge,\n    sym::Symbol,\n    dim;\n    Kac=false, r=0, s=0,\n    degenerate=false, diagonal=false\n)","category":"page"},{"location":"cft_data/#BootstrapVirasoro.Field","page":"Basic types","title":"BootstrapVirasoro.Field","text":"Field{T}\n\nObject representing a conformal field. Contains the conformal dimensions, and flags saying whether the field has rational Kac indices and/or is diagonal. The user can access different parametrisations of the left and  right conformal dimensions, and Kac indices.\n\nExamples\n\njulia> c = CentralCharge(B = 0.5)\nc = 27.999999999999996 + 0.0im, β = 0.0 - 0.7071067811865476im\n\njulia> V = Field(c, Kac=true, r=0, s=2//3)\nNon-diagonal Field{ComplexF64}\nleft: ConformalDimension{ComplexF64} with Kac indices r = 0//1, s = 2//3\nright: ConformalDimension{ComplexF64} with Kac indices r = 0//1, s = -2//3\n\njulia> V.r\n0//1\n\njulia> V.s\n2//3\n\njulia> V.δ\n(-0.22222222222222215 - 0.0im, -0.22222222222222215 + 0.0im)\n\njulia> V.δ[:left]\n-0.22222222222222215 - 0.0im\n\njulia> V.p[:right]\n0.4714045207910316 + 0.0im\n\njulia> V2 = Field(c, δ = 0.5, diagonal=true)\nDiagonal Field{ComplexF64} with ConformalDimension{ComplexF64} with\nΔ = 1.625 + 0.0im, P = 0.7071067811865476\n\n\n\n\n\n","category":"type"},{"location":"cft_data/#BootstrapVirasoro.Field-Tuple{CentralCharge, Symbol, Any}","page":"Basic types","title":"BootstrapVirasoro.Field","text":"Field(charge, parameter = value; kwargs)\nField(charge, Kac = true, r = r, s = s)\n\nConstructor function for the Field type.\n\nGiven a charge charge, one of the four parameters Δ, δ, P, p and two values, create an object Field{T} (where T is the type of the values in charge) that represents a field of left and right dimensions given by leftvalue and rightvalue in the chosen parametrisation.\n\nkeyword arguments:\n\nKac::Bool: if set to true, the field can be constructed from the values of its r and s\n\nindices. By convention V_(rs) has left and right momenta (P_(rs) P_(r-s)).\n\nr::Rational,s::Rational: used in conjunction to Kac=true, must be given rational\n\nvalues,\n\ndiagonal::Bool: set to true to get a diagonal field;\n\nExamples\n\njulia> setprecision(BigFloat, 20, base=10);\n\njulia> c = CentralCharge(β = big\"0.5\");\n\njulia> V = Field(c, Kac=true, r=0, s=1)\nNon-diagonal Field{Complex{BigFloat}}\nleft: ConformalDimension{Complex{BigFloat}} with Kac indices r = 0, s = 1\nright: ConformalDimension{Complex{BigFloat}} with Kac indices r = 0, s = -1\n\njulia> V.Δ\n(0.4375 + 0.0im, 0.4375 + 0.0im)\n\njulia> V.P[:left]\n1.0\n\njulia> V.p[:right]\n-0.0 + 1.0im\n\njulia> V2 = Field(c, :P, 0.42, diagonal=true)\nDiagonal Field{Complex{BigFloat}} with ConformalDimension{Complex{BigFloat}} with\nΔ = -0.3861000000000000130545 + 0.0im, P = 0.4199999999999999844569\n\njulia> V3 = Field(c, Kac=true, degenerate=true, r=4, s=3//4)\nDiagonal Field{Complex{BigFloat}} with ConformalDimension{Complex{BigFloat}} with Kac indices r = 4//1, s = 3//4\n\n\n\n\n\n","category":"method"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To install this package, run","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg; Pkg.add(\"https://github.com/Paul-Roux-Phys/BootstrapVirasoro.git\")","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"in a Julia script, or download the code from the repo, put it somewhere where Julia can see the BootstrapVirasoro module and do","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> ]add BootstrapVirasoro","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"in a Julia REPL.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"The module is then accessible via","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using BootstrapVirasoro","category":"page"},{"location":"conformal_blocks/#Conformal-blocks","page":"Conformal blocks","title":"Conformal blocks","text":"","category":"section"},{"location":"conformal_blocks/","page":"Conformal blocks","title":"Conformal blocks","text":"xfromq","category":"page"},{"location":"conformal_blocks/#BootstrapVirasoro.xfromq","page":"Conformal blocks","title":"BootstrapVirasoro.xfromq","text":"Cross ratio x from the nome q\n\n\n\n\n\n","category":"function"},{"location":"conformal_blocks/","page":"Conformal blocks","title":"Conformal blocks","text":"qfromx","category":"page"},{"location":"conformal_blocks/#BootstrapVirasoro.qfromx","page":"Conformal blocks","title":"BootstrapVirasoro.qfromx","text":"Nome q from the cross-ratio x\n\n\n\n\n\n","category":"function"},{"location":"conformal_blocks/","page":"Conformal blocks","title":"Conformal blocks","text":"Correlation(V::ExtFields{T}, Nmax::Int) where {T}","category":"page"},{"location":"conformal_blocks/#BootstrapVirasoro.Correlation-Union{Tuple{T}, Tuple{Tuple{Vararg{Field{T}}}, Int64}} where T","page":"Conformal blocks","title":"BootstrapVirasoro.Correlation","text":"Correlation(Vs::FourFields{T}, Nmax::Int)\n\nConstructor function for the Correlation type.\n\nExamples\n\njulia> c = CentralCharge(:c, 0.5);\njulia> V1 = Field(c, Kac=true, r=1, s=0);\njulia> V2 = Field(c, Kac=true, r=2, s=0);\njulia> corr = Correlation((V1, V2, V2, V1), 6)\n\nNote that the parentheses are optional around the four fields:\n\njulia> corr2 = Correlation(V1, V1, V2, V1, 6);\njulia> corr2._Rmn[:u][:left]\n\n\n\n\n\n","category":"method"},{"location":"#BootstrapVirasoro.jl-documentation","page":"Home","title":"BootstrapVirasoro.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BootstrapVirasoro\nDocTestSetup = quote\n    using BootstrapVirasoro\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is the documentation page for the BootstrapVirasoro package. BootstrapVirasoro is a package for doing bootstrap computations in theories with Virasoro symmetry.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Installation\nBasic types\nConformal blocks","category":"page"}]
}
